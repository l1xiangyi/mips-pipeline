$date
	Thu May  4 21:44:00 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 32 ! result_tb [31:0] $end
$var wire 3 " flags_tb [2:0] $end
$var reg 32 # instruction_tb [31:0] $end
$var reg 32 $ regA_tb [31:0] $end
$var reg 32 % regB_tb [31:0] $end
$scope module uut $end
$var wire 3 & flags [2:0] $end
$var wire 32 ' instruction [31:0] $end
$var wire 32 ( regA [31:0] $end
$var wire 32 ) regB [31:0] $end
$var wire 32 * result [31:0] $end
$var wire 32 + shamt [31:0] $end
$var wire 6 , opcode [5:0] $end
$var wire 32 - imm_ext [31:0] $end
$var wire 16 . imm [15:0] $end
$var wire 6 / funct [5:0] $end
$var reg 3 0 alu_flags [2:0] $end
$var reg 32 1 alu_result [31:0] $end
$var reg 3 2 flags_reg [2:0] $end
$var reg 32 3 result_reg [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111 3
b0 2
b1111 1
b0 0
b100000 /
b1000000100000 .
b1000000100000 -
b0 ,
b0 +
b1111 *
b101 )
b1010 (
b1010001000000100000 '
b0 &
b101 %
b1010 $
b1010001000000100000 #
b0 "
b1111 !
$end
#10000
b10101 !
b10101 *
b10101 3
b10101 1
b1000 ,
b1011 /
b1011 -
b1011 .
b100001000010000000000000001011 #
b100001000010000000000000001011 '
#20000
b1111 !
b1111 *
b1111 3
b1111 1
b0 ,
b100001 /
b1000000100001 -
b1000000100001 .
b1010001000000100001 #
b1010001000000100001 '
#30000
b10110 !
b10110 *
b10110 3
b10110 1
b1001 ,
b1100 /
b1100 -
b1100 .
b100101000010000000000000001100 #
b100101000010000000000000001100 '
#40000
b101 !
b101 *
b101 3
b101 1
b0 ,
b100010 /
b1000000100010 -
b1000000100010 .
b1010001000000100010 #
b1010001000000100010 '
#50000
b100011 /
b1000000100011 -
b1000000100011 .
b1010001000000100011 #
b1010001000000100011 '
#60000
